# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    plan                                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mrakhman <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2018/05/12 18:42:34 by mrakhman          #+#    #+#              #
#    Updated: 2018/05/12 19:45:47 by mrakhman         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

[1] Imagine this project NOT like Tetris game but like filling a dynamic size square with tetris pieces

[2] Each piece should be stored in the memory separately, in the most upper-left position

[3] The task is to put pieces in the smallest square possible no matter their order. Without rotation

[4] The minimum square is sqtr(N of pieces * 4). Example: sqrt(4 * 4) = 4 // It is width and length of the square S = a * a

[5] The square will hardly ever be minimum and if it's not minimum - gaps occure. We should save dots .



------------------------------------- [Main part] -------------------------------------------------------------

[Step 1] Read file and store each tetrimino in a separate t_tetrimino in chained list

[Step 2] Count the minimum square side

[Step 3] Try to fit tetriminos in all possible combinations

[Step 4] Increment the square side (a + 1)^2 and do Step 3. Until all Tetriminos fit. Mind upper-leftposition!

[Step 5] Assigne each Tetrimino to a letter starting from upper-left position, go left + down

[Step 6] Print the square with dots .



------------------------------------ [Valid 19 shapes + 1 blank] -------------------------------------------------

.##.	....	....	....	|	###.	...#	.###	#...	##..	...#	....	..##
..##	.##.	#...	..#.	|	#...	.###	...#	###.	#...	...#	#...	...#
....	##..	##..	.##.	|	....	....	....	....	#...	..##	#...	...#
....	....	.#..	.#..	|	....	....	....	....	....	....	##..	....


#...	...#	.###	....	|	####	#...	|	##..	|	
##..	..##	..#.	....	|	....	#...	|	##..	|	
#...	...#	....	.#..	|	....	#...	|	....	|	
....	....	....	###.	|	....	#...	|	....	|	



---------------------------------- [Error handling] ------------------------------------------------------------------

[1] Number of Tetriminos > 26 || < 1
[2] Invalid Tetrimino:
		a) wrong symbols (= @ , |)
		b) wrong # location (invalid Tetrimino). 19 shapes. There is a formula: count the N of neighbors (#) for each of # 
		c) wrong N of # in Tetrimino
		d) Tetriminos are not in upper-left position
[3] Wrond N of lines in 1 Tetri (!= 4)
[4] Wrong len of gaps in at least 1 of 4 lines of Tetri (!= 4) && gap symbols == '.'
[5] No gaps between tetriminos || > 1 gap, 
[5] Invalid symbols in gaps between tetriminos (in the area of \n)
[6]nvalid file (text)

